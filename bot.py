import os, logging
from datetime import date
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    ContextTypes, ConversationHandler,
    MessageHandler, filters
)
from notion_service import create_page, update_property

PROP_MAP = {
    'idea':  '–ò–¥–µ—è',
    'draft': '–ß–µ—Ä–Ω–æ–≤–∏–∫',
    'final': '–§–∏–Ω–∞–ª'
}

load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
logging.basicConfig(level=logging.INFO)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    STEP_CHOOSE,     # –∂–¥—ë–º, —á—Ç–æ –≤–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: idea/draft/final
    STEP_INPUT,      # –∂–¥—ë–º —Å–∞–º —Ç–µ–∫—Å—Ç –∏–¥–µ–∏, —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∏–ª–∏ —Ñ–∏–Ω–∞–ª–∞
    STEP_DATE        # –∂–¥—ë–º –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
) = range(3)

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –ª—é–±—É—é –∏–∑ –∫–æ–º–∞–Ω–¥:\n"
        "/idea ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–¥–µ—é\n"
        "/draft ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫\n"
        "/final ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª\n"
        "–ü–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞ –±–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."
    )

async def entry(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û–±—â–∏–π –≤—Ö–æ–¥ –¥–ª—è /idea, /draft, /final."""
    cmd = update.message.text.split()[0][1:]  # "idea", "draft" –∏–ª–∏ "final"
    ctx.user_data['mode'] = cmd                   # –∑–∞–ø–æ–º–Ω–∏–º, —á—Ç–æ —Å–µ–π—á–∞—Å —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    ctx.user_data['page_id'] = create_page()  # –µ—Å–ª–∏ –Ω–µ—Ç —Å—Ç—Ä–æ–∫–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º
    await update.message.reply_text(f"–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è {cmd}.")
    return STEP_INPUT

async def save_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    mode = ctx.user_data['mode']
    text = update.message.text.strip()
    prop = PROP_MAP[mode]                     # '–ò–¥–µ—è' / '–ß–µ—Ä–Ω–æ–≤–∏–∫' / '–§–∏–Ω–∞–ª'
    update_property(ctx.user_data['page_id'], prop, text)
    await update.message.reply_text('–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –£–∫–∞–∂–∏ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (YYYY-MM-DD).')
    return STEP_DATE

async def save_date(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏–ª–∏ –¥–∞—Ç—É, –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë."""
    raw = update.message.text.strip().replace('.', '-').replace('/', '-')
    try:
        date.fromisoformat(raw)
    except ValueError:
        return await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–æ–¥–∏ YYYY-MM-DD.")
    update_property(ctx.user_data['page_id'], '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', raw)
    await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ì–æ—Ç–æ–≤–æ! üòä")
    return ConversationHandler.END

async def cancel(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ /idea, /draft –∏–ª–∏ /final.")
    return ConversationHandler.END

if __name__ == '__main__':
    conv = ConversationHandler(
        entry_points=[
            CommandHandler('idea', entry),
            CommandHandler('draft', entry),
            CommandHandler('final', entry),
        ],
        states={
            STEP_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_text)],
            STEP_DATE:  [MessageHandler(filters.TEXT & ~filters.COMMAND, save_date)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(conv)
    app.run_polling(drop_pending_updates=True)
